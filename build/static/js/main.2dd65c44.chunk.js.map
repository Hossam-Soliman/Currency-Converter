{"version":3,"sources":["img/cover1.jpg","Navbar.js","RatesTable.js","RatesConverter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","style","fontSize","color","marginRight","marginTop","RatesTable","firstCurrency","secondCurrency","rate","backgroundColor","paddingTop","paddingBottom","textAlign","marginBottom","Number","toFixed","RatesConverter","useState","currencies","setCurrencies","setFirstCurrency","setSecondCurrency","inputValue","setInputValue","date","setDate","setRate","result","setResult","screenWidth","window","screen","width","useEffect","axios","get","then","res","data","base","Object","keys","rates","catch","err","currenciesList","map","currency","value","key","backgroundImage","cover","onSubmit","e","preventDefault","document","getElementById","innerHTML","id","type","onChange","target","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.2dd65c44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cover1.276a81c4.jpg\";","import React from 'react';\r\nimport { FaBtc, FaLock } from \"react-icons/fa\";\r\n\r\nconst Navbar = () => {\r\n    return ( \r\n        <div className=\"navbar\">\r\n            <div className=\"container\">\r\n                <ul className=\"logo\">\r\n                    <li><FaBtc style={{fontSize:45, color:'#FCB813'}} /></li>\r\n                </ul>\r\n                <ul className=\"nav-info\">\r\n                    <li>SEND MONEY</li>\r\n                    <li>BUSINESS & API</li>\r\n                    <li>TOOLS</li>\r\n                    <li>RESCOURCES</li>\r\n                    <li className=\"login\"><FaLock style={{marginRight:5, marginTop:-3, fontSize:18}} />Log In</li>\r\n                </ul>\r\n            </div>\r\n           \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Navbar;","import React from \"react\";\r\n\r\nconst RatesTable = ({ firstCurrency, secondCurrency, rate }) => {\r\n  return (\r\n    <div className=\"table\">\r\n      <div\r\n        className=\"container\"\r\n        style={{ backgroundColor: \"#fff\", paddingTop: 50, paddingBottom: 30 }}\r\n      >\r\n        <h4 style={{ color: \"#082976\", textAlign: \"center\", marginBottom: 30 }}>\r\n          Convert {firstCurrency} to {secondCurrency}\r\n        </h4>\r\n        <table>\r\n          <tr>\r\n            <th>{firstCurrency}</th>\r\n            <th>{secondCurrency}</th>\r\n          </tr>\r\n          <tr>\r\n            <td>1 {firstCurrency}</td>\r\n            <td>\r\n              {rate} {secondCurrency}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>5 {firstCurrency}</td>\r\n            <td>\r\n              {Number(rate * 5).toFixed(4)} {secondCurrency}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>10 {firstCurrency}</td>\r\n            <td>\r\n              {Number(rate * 10).toFixed(4)} {secondCurrency}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>20 {firstCurrency}</td>\r\n            <td>\r\n              {Number(rate * 20).toFixed(4)} {secondCurrency}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>50 {firstCurrency}</td>\r\n            <td>\r\n              {Number(rate * 50).toFixed(4)} {secondCurrency}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>100 {firstCurrency}</td>\r\n            <td>\r\n              {Number(rate * 100).toFixed(4)} {secondCurrency}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>500 {firstCurrency}</td>\r\n            <td>\r\n              {Number(rate * 500).toFixed(4)} {secondCurrency}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>1000 {firstCurrency}</td>\r\n            <td>\r\n              {Number(rate * 1000).toFixed(4)} {secondCurrency}\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RatesTable;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport cover from \"./img/cover1.jpg\";\r\nimport { FaAngleRight, FaExchangeAlt } from \"react-icons/fa\";\r\nimport Navbar from \"./Navbar\";\r\nimport RatesTable from \"./RatesTable\";\r\n\r\nconst RatesConverter = () => {\r\n  const [currencies, setCurrencies] = useState([]);\r\n  const [firstCurrency, setFirstCurrency] = useState(\"EUR\");\r\n  const [secondCurrency, setSecondCurrency] = useState(\"USD\");\r\n  const [inputValue, setInputValue] = useState();\r\n  const [date, setDate] = useState();\r\n  const [rate, setRate] = useState();\r\n  const [result, setResult] = useState();\r\n\r\n  const screenWidth = window.screen.width <= 770;\r\n\r\n  useEffect(() => {\r\n    axios.get(\"https://api.exchangeratesapi.io/latest\").then((res) => {\r\n      setCurrencies([res.data.base, ...Object.keys(res.data.rates)]);\r\n      setDate(res.data.date);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.exchangeratesapi.io/latest?base=${firstCurrency}&symbols=${secondCurrency}`\r\n      )\r\n      .then((res) => {\r\n        setRate(res.data.rates[secondCurrency]);\r\n      })\r\n      .catch((err) => {\r\n        setRate(1);\r\n      });\r\n  }, [firstCurrency, secondCurrency]);\r\n\r\n  const getRate = (e) => {\r\n    e.preventDefault();\r\n    const inputValue = document.getElementById(\"input\").value;\r\n    setInputValue(inputValue);\r\n    if (inputValue >= 0) {\r\n      setResult(inputValue * rate);\r\n      // document.getElementById('errorMsg').innerHTML= ''\r\n    } else {\r\n      document.getElementById(\"errorMsg\").innerHTML = \"Positive numbers only\";\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    // const inputValue = document.getElementById('input').value\r\n    // if (inputValue >=0){\r\n    //     setResult(inputValue * rate)\r\n    //     // document.getElementById('errorMsg').innerHTML= ''\r\n    // }else{\r\n    //     document.getElementById('errorMsg').innerHTML='Positive numbers only'\r\n    // }\r\n  };\r\n\r\n  const swapCurrency = () => {\r\n    if (firstCurrency === document.getElementById(\"select1\").value) {\r\n      document.getElementById(\"select1\").value = secondCurrency;\r\n      document.getElementById(\"select2\").value = firstCurrency;\r\n      setFirstCurrency(document.getElementById(\"select1\").value);\r\n      setSecondCurrency(document.getElementById(\"select2\").value);\r\n    } else {\r\n      document.getElementById(\"select1\").value = firstCurrency;\r\n      document.getElementById(\"select2\").value = secondCurrency;\r\n      setFirstCurrency(document.getElementById(\"select1\").value);\r\n      setSecondCurrency(document.getElementById(\"select2\").value);\r\n    }\r\n  };\r\n\r\n  const currenciesList = currencies.map((currency) => {\r\n    return (\r\n      <option value={currency} key={currency}>\r\n        {currency}\r\n      </option>\r\n    );\r\n  });\r\n  return (\r\n    <Fragment>\r\n      <div className=\"body\" style={{ backgroundImage: \"url(\" + cover + \")\" }}>\r\n        <Navbar />\r\n        <div className=\"container\">\r\n          <h5 style={{ textAlign: \"left\", color: \"#fff\", marginTop: 50 }}>\r\n            Last updated: {date}\r\n          </h5>\r\n          <div className=\"convert-area\">\r\n            <form className=\"body-form\" onSubmit={getRate}>\r\n              <label>Amount</label>\r\n              <input\r\n                className=\"input\"\r\n                id=\"input\"\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n              ></input>\r\n              <label>From</label>\r\n              <select\r\n                id=\"select1\"\r\n                onChange={(e) => setFirstCurrency(e.target.value)}\r\n              >\r\n                {currenciesList}\r\n              </select>\r\n              <FaExchangeAlt\r\n                style={{ fontSize: 40, marginTop: 7 }}\r\n                onClick={swapCurrency}\r\n              />\r\n              <select\r\n                id=\"select2\"\r\n                value={secondCurrency}\r\n                onChange={(e) => setSecondCurrency(e.target.value)}\r\n              >\r\n                {currenciesList}\r\n              </select>\r\n\r\n              <button>\r\n                <FaAngleRight style={{ fontSize: 40, marginTop: -3 }} />\r\n              </button>\r\n            </form>\r\n            {result && (\r\n              <h4 style={{ fontSize: 16, color: \"white\" }}>\r\n                {inputValue} {firstCurrency} ={\" \"}\r\n              </h4>\r\n            )}\r\n            <div className=\"values\">\r\n              <h1>{result && Number(result).toFixed(4)}</h1>\r\n              {result && <h4> {secondCurrency}</h4>}\r\n            </div>\r\n            {result && (\r\n              <h2 style={{ color: \"#fff\" }}>\r\n                1 {firstCurrency} = {Number(rate).toFixed(4)} {secondCurrency}\r\n              </h2>\r\n            )}\r\n            {!screenWidth && (\r\n              <p className=\"note\">\r\n                All figures are live mid-market rates, which are not available\r\n                to consumers and are for informational purposes only.\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <RatesTable\r\n          firstCurrency={firstCurrency}\r\n          secondCurrency={secondCurrency}\r\n          rate={rate}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default RatesConverter;\r\n\r\n// style={{backgroundImage: \"url(\" + cover + \")\"}}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport RatesConverter from \"./RatesConverter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RatesConverter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}